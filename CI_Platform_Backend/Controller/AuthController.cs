using AutoMapper;
using CI_Platform_Backend_DBEntity.DataModels;
using CI_Platform_Backend_Presentation.DTO.Login;
using CI_Platform_Backend_Presentation.DTO.Register;
using CI_Platform_Backend_Presentation.DTO.ResetPassword;
using CI_Platform_Backend_Services;
using CI_Platform_Backend_Services.Auth;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Mvc;

namespace CI_Platform_Backend.Controller;

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly IAuthService _authService;
    private readonly IJwtService _jwtService;

    public AuthController(IMapper mapper, IAuthService authService, IJwtService jwtService)
    {
        _mapper = mapper;
        _jwtService = jwtService;
        _authService = authService;
    }

    // Created: 4 June - Dhruvil Bhojani
    // Register Action to Add New Users to get Registered 
    [HttpPost]
    [Route("register")]
    public async Task<IActionResult> RegisterAsync([FromBody] RegisterDTO registerDTO)
    {
        return await _authService.RegisterUserAsync(_mapper.Map<User>(registerDTO)) ? 
            Ok() : 
            BadRequest();        
    }

    // Created: 4 June - Dhruvil Bhojani
    // Login Action to Validate User Credentials and return JWT authentication token to client 
    [HttpPost]
    [Route("login")]
    public async Task<IActionResult> LoginAsync([FromBody] LoginDTO loginDTO)
    {
        return await _authService.IsValidUserAsync(loginDTO) ? 
            Ok(_jwtService.AuthenticationToken(loginDTO.Email)) :
            BadRequest();
    }

    // Created: 4 June - Dhruvil Bhojani
    // Forget Password Action to Validate User Email and return JWT token with email to client
    [HttpPost]
    [Route("forget-password")]
    public async Task<IActionResult> ForgetPasswordAsync(string email)
    {
         return await _authService.IsUserExistAsync(email) ? 
            Ok(_jwtService.ResetPasswordToken(email)) :
            BadRequest();
    }

    // Created: 4 June - Dhruvil Bhojani
    // Reset Password Action to validate token generated by ForgetPassword Action and ResetPassword will change the Password
    // Updated: 5 June - Dhruvil Bhojani
    // Updated Remaining Part of the Action
    [HttpPost]
    [Route("reset-password")]
    public async Task<IActionResult> ResetPasswordAsync(ResetPasswordDTO resetPasswordDTO)
    {
        if(!_jwtService.ValidateResetPasswordToken(resetPasswordDTO.Token))
        {
            return Unauthorized();
        }
        if(await _authService.ResetPasswordAsync(_jwtService.GetEmailFromToken(resetPasswordDTO.Token), resetPasswordDTO.Password))
        {
            return Ok();
        }
        return BadRequest();
    }

    // Created: 4 June - Dhruvil Bhojani
    // For Demo Purpose of Authentication and Authorization
    [HttpGet]
    [Authorize(Roles ="Other")]
    public async Task<IActionResult> UsersAsync()
    {
        return Ok();
    }

    [HttpGet]
    [Route("/something-went-wrong")]
    public ActionResult Exception()
    {
        var exceptionDetails = HttpContext.Features.Get<IExceptionHandlerFeature>();
        return BadRequest(exceptionDetails);
    }
}
