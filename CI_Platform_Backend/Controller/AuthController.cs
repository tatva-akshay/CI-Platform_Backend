using System.Net;
using AutoMapper;
using CI_Platform_Backend_DBEntity.DataModels;
using CI_Platform_Backend_Presentation;
using CI_Platform_Backend_Presentation.DTO.Login;
using CI_Platform_Backend_Presentation.DTO.Register;
using CI_Platform_Backend_Presentation.DTO.ResetPassword;
using CI_Platform_Backend_Services;
using CI_Platform_Backend_Services.Auth;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Mvc;

namespace CI_Platform_Backend.Controller;

[ApiController]
[Route("auth")]
public class AuthController : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly IAuthService _authService;
    private readonly IJwtService _jwtService;
    private readonly APIResponse _aPIResponse = new APIResponse();

    public AuthController(IMapper mapper, IAuthService authService, IJwtService jwtService)
    {
        _mapper = mapper;
        _jwtService = jwtService;
        _authService = authService;
    }

    // Created: 4 June - Dhruvil Bhojani
    // Register Action to Add New Users to get Registered 
    [HttpPost]
    [Route("register")]
    public async Task<IActionResult> RegisterAsync([FromBody] RegisterDTO registerDTO)
    {
        if(await _authService.IsUserExistAsync(registerDTO.Email))
        {
            _aPIResponse.StatusCode = System.Net.HttpStatusCode.BadRequest;
            _aPIResponse.ErrorMessages = ["User on entered email already Exists."];
            return BadRequest(_aPIResponse);
        }
        
        if(await _authService.RegisterUserAsync(_mapper.Map<User>(registerDTO)))
        {
            _aPIResponse.IsSuccess = true;
            _aPIResponse.StatusCode = System.Net.HttpStatusCode.NoContent;
            return Ok(_aPIResponse);
        } 
        
        _aPIResponse.StatusCode = System.Net.HttpStatusCode.BadRequest;
        _aPIResponse.ErrorMessages = ["New User Registration Failed"];
        return BadRequest(_aPIResponse);
    }

    // Created: 4 June - Dhruvil Bhojani
    // Login Action to Validate User Credentials and return JWT authentication token to client 
    [HttpPost]
    [Route("login")]
    public async Task<IActionResult> LoginAsync([FromBody] LoginDTO loginDTO)
    {
        string userName = await _authService.IsValidUserAsync(loginDTO);
        if(!string.IsNullOrEmpty(userName))
        {
            _aPIResponse.IsSuccess = true;
            _aPIResponse.StatusCode = System.Net.HttpStatusCode.OK;
            _aPIResponse.Token = _jwtService.AuthenticationToken(loginDTO.Email);
            _aPIResponse.Result = userName;
            return Ok(_aPIResponse);
        }

        _aPIResponse.StatusCode = System.Net.HttpStatusCode.NotFound;
        _aPIResponse.ErrorMessages = ["Invalid Credentials"];
        return NotFound(_aPIResponse);
    }

    // Created: 4 June - Dhruvil Bhojani
    // Forget Password Action to Validate User Email and return JWT token with email to client
    [HttpPost]
    [Route("forget-password")]
    public async Task<IActionResult> ForgetPasswordAsync(string email)
    {
        if(await _authService.IsUserExistAsync(email))
        {
            _aPIResponse.IsSuccess = true;
            _aPIResponse.StatusCode = System.Net.HttpStatusCode.OK;
            _aPIResponse.Token = _jwtService.ResetPasswordToken(email);
            return Ok(_aPIResponse);
        } 

        _aPIResponse.StatusCode = System.Net.HttpStatusCode.NotFound;
        _aPIResponse.ErrorMessages = ["Invalid Email Id"];
        return NotFound(_aPIResponse);
    }

    // Created: 4 June - Dhruvil Bhojani
    // Reset Password Action to validate token generated by ForgetPassword Action and ResetPassword will change the Password
    // Updated: 5 June - Dhruvil Bhojani
    // Updated Remaining Part of the Action
    [HttpPost]
    [Route("reset-password")]
    public async Task<IActionResult> ResetPasswordAsync(ResetPasswordDTO resetPasswordDTO)
    {
        if(!_jwtService.ValidateResetPasswordToken(resetPasswordDTO.Token))
        {
            _aPIResponse.StatusCode = System.Net.HttpStatusCode.Unauthorized;
            _aPIResponse.ErrorMessages = ["Token is invalid"];
            return Unauthorized(_aPIResponse);
        }
        if(await _authService.ResetPasswordAsync(_jwtService.GetEmailFromToken(resetPasswordDTO.Token), resetPasswordDTO.Password))
        {
            _aPIResponse.IsSuccess = true;
            _aPIResponse.StatusCode = System.Net.HttpStatusCode.OK;
            _aPIResponse.Result = "Password changed Successfully";
            return Ok(_aPIResponse);
        }
        _aPIResponse.StatusCode = System.Net.HttpStatusCode.NotFound;
        _aPIResponse.ErrorMessages = ["Email Id is invalid in token."];
        return NotFound(_aPIResponse);
    }

    [HttpGet]
    [Route("/something-went-wrong")]
    public ActionResult Exception()
    {
        _aPIResponse.StatusCode = System.Net.HttpStatusCode.BadRequest;
        _aPIResponse.ErrorMessages = [HttpContext.Features.Get<IExceptionHandlerFeature>()?.ToString()!];
        return BadRequest(_aPIResponse);
    }
}